{"remainingRequest":"/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/pulkit604/swt2/chatbotmanager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pulkit604/swt2/chatbotmanager/src/components/loginRegister.vue?vue&type=template&id=76fc574c&scoped=true&","dependencies":[{"path":"/Users/pulkit604/swt2/chatbotmanager/src/components/loginRegister.vue","mtime":1595010265809},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/cache-loader/dist/cjs.js","mtime":1592329923983},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1592329973272},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/cache-loader/dist/cjs.js","mtime":1592329923983},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/index.js","mtime":1592329973272}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}