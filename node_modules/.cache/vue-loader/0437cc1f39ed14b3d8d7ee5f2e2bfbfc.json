{"remainingRequest":"/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pulkit604/swt2/chatbotmanager/src/components/botSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pulkit604/swt2/chatbotmanager/src/components/botSelect.vue","mtime":1595860674324},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/cache-loader/dist/cjs.js","mtime":1592329923983},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/babel-loader/lib/index.js","mtime":1592329923997},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/cache-loader/dist/cjs.js","mtime":1592329923983},{"path":"/Users/pulkit604/swt2/chatbotmanager/node_modules/vue-loader/lib/index.js","mtime":1592329973272}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vcm91dGVyLmpzJzsKaW1wb3J0IENPTlNUIGZyb20gJy4uL2NvbnN0LmpzJzsKICBleHBvcnQgZGVmYXVsdCB7CiAgICAgIG5hbWU6ICJib3RTZWxlY3QiLAogICAgICByb3V0ZXIsCiAgICAgIGRhdGEoKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGJvdExpc3Q6IFsnYScsICdiJywgJ2MnXSwKICAgICAgICAgICAgYm90TmFtZTogJycsCiAgICAgICAgICAgIHB1cnBvc2U6ICcnLAogICAgICAgICAgfTsKICAgICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgZ29Ub0JvdEVkaXQobmFtZSl7CiAgICAgICAgcm91dGVyLnB1c2goeyBwYXRoOiAnZWRpdC1ib3QvJyArIG5hbWV9KTsKICAgICAgfSwKICAgICAgY3JlYXRlQm90KCkgewogICAgICAgIGZldGNoKCBDT05TVC5BUElfSE9TVCArICc/Y3JlYXRlX2JvdCcsICB7CiAgICAgICAgICBtZXRob2QgOiAnUE9TVCcsCiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSwKICAgICAgICAgIGJvZHkgICA6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgbmFtZTogdGhpcy5ib3ROYW1lLAogICAgICAgICAgICBwdXJwb3NlOiB0aGlzLnB1cnBvc2UsCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKQogICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgIGlmKHJlc3BvbnNlID09IDEpIHRoaXMuZ29Ub0JvdEVkaXQodGhpcy5uYW1lKTsKICAgICAgICB9KQogICAgICB9LAogICAgfSwKICB9Cg=="},{"version":3,"sources":["botSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"botSelect.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h2>Select your Bot or Create new</h2>\n    <div class=\"container\">\n      <div>Already existing</div>\n      <ul style=\"list-style: none\">\n        <li class=\"bot_list_item\" v-for=\"botName in botList\" :key=\"'existing_bot' + botName\"><div @click=\"goToBotEdit(botName)\">{{ botName }}</div></li>\n      </ul>\n      <div>Create New Bot</div>\n        <form>\n          <label>Bot Name</label>\n          <input v-model=\"botName\"/>\n          <label>Purpose</label>\n          <input v-model=\"purpose\"/>\n          <button @click=\"createBot()\">Create</button>\n        </form>\n    </div>\n  </div>\n</template>\n\n<script>\n  import router from '../router.js';\n  import CONST from '../const.js';\n    export default {\n        name: \"botSelect\",\n        router,\n        data() {\n            return {\n                botList: ['a', 'b', 'c'],\n              botName: '',\n              purpose: '',\n            };\n        },\n      methods: {\n        goToBotEdit(name){\n          router.push({ path: 'edit-bot/' + name});\n        },\n        createBot() {\n          fetch( CONST.API_HOST + '?create_bot',  {\n            method : 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body   : JSON.stringify({\n              name: this.botName,\n              purpose: this.purpose,\n            })\n          })\n          .then(response => response.json())\n          .then(response => {\n            if(response == 1) this.goToBotEdit(this.name);\n          })\n        },\n      },\n    }\n</script>\n\n<style scoped>\n.bot_list_item {\n  color: aqua;\n}\n</style>"]}]}